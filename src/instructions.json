{
  "exercises": [
    {
      "id": "what-is-git",
      "steps": [
        {
          "stepNum": 1,
          "learn": "<p>As software developers, we use git when working on projects by ourselves, with teammates, and making our projects available on Github. Git tracks changes to our projects and allows for easy collaboration between multiple users. Additionally, it allows us to continually save drafts of our projects. If we ever make changes and need to revert back to a previous version, git makes this possible.</p><p>In this series of tutorials, you will learn the path that is working with local files and files stored in GitHub. To begin, and for the sake of explanation, we will jump around a bit. Take a look to the right side of this page and notice the folder labeled Github Master (top left hand corner). This folder is our project that is available to the public (or private guests) at all times. Additionally, as you and your team continually update the project, this is where the newly updated version of your project will be stored. As you might expect, you want to be sure to only place what you want others to see on the Github Master. Any careless changes would impact the entire project!</p><p>Next, notice the folder labeled Local Master. This will always serve as the starting point on our path towards using git. After all, anything that we store on Github had to built on our computer first. The Local Master is where it all begins. This master version will be worked on only when creating your initial files and folders. As I mentioned previously, the Github Master is the one shared by you and your teammates, so it will be critical to keep a copy of this master version on your computer. In this case, that’s what the Local Master is for. It keeps a master copy of what is available on Github on your local machine. That way, you can be sure to be working on the most up to date version of your project at all times. If you fail to do so, you may end up working on files that are out of date and this will create problems down the road when you try to add in new code that may conflict with old code.</p><p>If you only work by yourself, you could theoretically get by with just using Github Master and Local Master. Once you make changes you are happy with, you could immediately push them up to the Github Master for the world to see. But, as mentioned before, git allows you to work on projects with a team of developers, not to mention the ability to go to back to previous drafts of your project. <p>This brings in the term “branching.” Using a branch serves a variety of useful purposes: checking for any conflicts that might override something on the master, sharing your proposed changes with your teammates, testing your code on a teammates machine, working on one task at a time to stay organized, etc.</p><p>Let’s check out the folder labeled Local Branch. As mentioned before, a “branch” allows us to work on our project without fear of overriding our public version of the project. It is the location where, after all of your files and folders are in place, you will always work on your project. To be clear, we can have many different branches off of our master, but for these tutorials, we will work with only one or two at a time.</p><p>Lastly, the Github Branch will simply serve as a copy of our Local Branch, but it will be used to allow our teammates to take a look at our proposed changes to the project. This is where your team can test your code and make sure it works on their computer, before merging it with the Github Master.</p><p>Working with the Github workflow is a like running the bases of a baseball diamond. Local Master is home base and we will always follow the same pattern. You can’t run directly from 1st to 3rd base, you’d be out immediately! We will get our files up in running in the Local Master (home base), work on updates and changes in our Local Branch (first base), push up those changes for our teammates to review in Github Branch (2nd base), merge those changes without Github Master (3rd base), and finally pull down the new Github Master into our Local Master (home run). Notice, jumping from Local Branch to Github Master was never mentioned, why? That would take our proposed changes and immediately merge them with our public Github Master. If there was any sort of problems that we missed, you could imagine, that would create some problems. The order in which we move is crucial.</p></p>Alright, let's get started!</p>"
        }
      ]
    },
    {
      "id": "getting-started",
      "steps": [
        {
          "stepNum": 1,
          "learn": "<p>When you first begin working on a new project, you will want to get your basic file structure in place. Let's assume that right now we are inside of a folder (or directory) called myProject. It currently contains a few essential files to get us started.</p><p>Notice, to the right is a virtual terminal. This is the area where we will enter all of our commands. These commands seem to have strange names, but they are always shorthand for something.</p>",
          "instructions": [
            {
              "id": "task1",
              "instruction": "In this case, we want to see a “list” of all of the files that have already been created. To do so, type in “ls” followed by enter. The \"ls\" command is simply short for \"list\"",
              "command": "ls",
              "answer": "ls",
              "hint": "ls",
              "terminal": "<p>ls</p><p>README.md css index.html javascripts</p>"
            }
          ],
          "append": "Notice, there is now a list of all the files inside of the myProject directory. Inside of the css folder is a main.css file and inside of the javascripts folder is a main.js file."
        },
        {
          "stepNum": 2,
          "learn": "As we continue down the road of getting started, we need to initialize the myProject directory (which contains all of our files) in order to start using git. As I mentioned before, we are already inside of the myProject directory, and that's the folder we will initialize.",
          "instructions": [
            {
              "id": "task1",
              "instruction": "Go ahead and type in “git init” into the terminal.",
              "command": "git init",
              "answer": "git init",
              "terminal": "<p>git init</p><p>Initialized empty Git repository in /Users/myComputer/workspace/myProject/.git/</p>",
              "hint": "git init",
              "style": "#lm"
            }
          ],
          "append": "Notice that Local Master has been initialized and we are now able to use git commands. Our files are sitting inside of the Local Master",
          "previousTerminal": "<p>ls</p><p>README.md css index.html javascripts</p>"
        },
        {
          "stepNum": 3,
          "learn": "<p>This next step, admittedly, will be the one contradiction to the workflow I will discuss in the upcoming exercises. Because we are just getting started, we need to give Github something to start with in order to create our project. Unfortunately, Github won’t allow us to start with a completely empty project. So, to make Github happy, we will add, commit, and push up directly from our Local Master to the Github Master, but just this once</p><p>What does adding, committing mean? Adding and committing is much like saving a draft of your project. This is really handy if something goes wrong with your project. You can always revert back to a previous commit, if necessary. When committing, you must provide a log message to describe your changes. It’s kind of like hitting Save As, with the ability to write as short or as long as a description as you feel necessary to remember what that commit contains.</p><p>Adding and committing will appear many times when working with git. Committing often is always a good rule of thumb.</p>",
          "instructions": [
            {
              "id": "task1",
              "instruction": "1. Let’s add those files and folders mentioned earlier.",
              "command": "git add .",
              "answer": "git add .",
              "terminal": "<p>git add .</p>",
              "hint": "git add .",
              "style": "#lm"
            },
            {
              "id": "task2",
              "instruction": "2. Let's commit our work",
              "command": "git commit -m \"file structure complete\"",
              "answer": "git commit -m \"file structure complete\"",
              "terminal": "<p>git commit -m \"file structure complete\"</p><p>[master (root-commit) abc12a1] file structure complete<br>4 files changed, 0 insertions(+), 0 deletions(-)<br>create mode 100644 README.md<br>create mode 100644 css/main.css<br>create mode 100644 index.html<br>create mode 100644 javascripts/main.js</p>",
              "hint": "git commit -m \"file structure complete\"",
              "style": "#lm"
            }
          ],
          "append": "Note: Once again, it’s important to have descriptive names for each commit. This will be very useful if you need to recover previous work.",
          "previousTerminal": "<p>ls</p><p>README.md css index.html javascripts</p><p>git init</p><p>Initialized empty Git repository in /Users/myComputer/workspace/myProject/.git/</p>",
          "preStyle": "#lm"
        },
        {
          "stepNum": 4,
          "learn": "<p>Lastly, we need to connect our project to a repository on Github and “push” up a copy of those files we just committed. Notice, I said it’s pushing a copy. Your local files will still stay on your computer, so not to worry. I have taken the liberty of setting us up an account and repository (where our project will be stored) on Github.</p><p><em>NOTE: Once again, creating a project from strach is the only time where we will push directly from Local Master to Github Master. We need to push up something to Github in order to make it happy and get our project started. Thankfully, this long remote command is provided to you by Github, so you could simply copy paste it in the future.</em></p>",
          "instructions": [
            {
              "id": "task1",
              "instruction": "1. Let's connect our directory to Github. Type in:",
              "command": "git remote add origin https://github.com/user/myProject.git",
              "answer": "git remote add origin https://github.com/user/myProject.git",
              "terminal": "<p>git remote add origin https://github.com/user/myProject.git</p>",
              "hint": "git remote add origin https://github.com/user/myProject.git",
              "preStyle": "#lm"
            },
            {
              "id": "task2",
              "instruction": "2. Next, let's push up our Local Master containing all of our files and push it to our Github Master",
              "command": "git push origin master",
              "answer": "git push origin master",
              "hint": "git push origin master",
              "style": "#gm",
              "removeStyle": "#lm",
              "terminal": "<p>git push origin master</p><p>Counting objects: 5, done.<br>Delta compression using up to 4 threads.<br>Compressing objects: 100% (2/2), done.<br>Writing objects: 100% (5/5), 395 bytes | 0 bytes/s , done.<br>Total 5 (delta 0), reused 0 (delta 0)<br>To https://github.com/user/myProject.git<br>* [new branch] master -> master</p>"
            }
          ],
          "previousTerminal": "<p>ls</p><p>README.md css index.html javascripts</p><p>git init</p><p>Initialized empty Git repository in /Users/myComputer/workspace/myProject/.git/</p><p>git add .</p><p>git commit -m \"file structure complete\"</p><p>[master (root-commit) abc12a1] file structure complete<br>4 files changed, 0 insertions(+), 0 deletions(-)<br>create mode 100644 README.md<br>create mode 100644 css/main.css<br>create mode 100644 index.html<br>create mode 100644 javascripts/main.js</p>"
        },
        {
          "stepNum": 5,
          "learn": "What’s up with this remote and origin? Remote allows us to connect our project to a repository on Github. It tells git where to look. Origin refers to where we are pushing the files from. In this case, we are push directly from the Local Master. Let's keep moving!",
          "previousTerminal": "<p>ls</p><p>README.md css index.html javascripts</p><p>git init</p><p>Initialized empty Git repository in /Users/myComputer/workspace/myProject/.git/</p><p>git add .</p><p>git commit -m \"file structure complete\"</p><p>[master (root-commit) abc12a1] file structure complete<br>4 files changed, 0 insertions(+), 0 deletions(-)<br>create mode 100644 README.md<br>create mode 100644 css/main.css<br>create mode 100644 index.html<br>create mode 100644 javascripts/main.js</p><p>git remote add origin https://github.com/user/myProject.git</p><p>git push origin master</p><p>Counting objects: 5, done.<br>Delta compression using up to 4 threads.<br>Compressing objects: 100% (2/2), done.<br>Writing objects: 100% (5/5), 395 bytes | 0 bytes/s , done.<br>Total 5 (delta 0), reused 0 (delta 0)<br>To https://github.com/user/myProject.git<br>* [new branch] master -> master</p>",
          "preStyle1": "#gm",
          "removeOldStyle": "#lm"
        }
      ]
    },
    {
      "id": "workflow-tutorial",
      "steps": [
        {
          "stepNum": 1,
          "learn": "Picking up where we left on the Getting Started Tutorial, we are now ready to start working on our project, along with our teammates. As mentioned before, branches help us share our work with teammates and work on individual, bite sized tasks. Additionally, we <i>never</i> want to work on our master (aka Local Master) during group projects. This is reserved for storing a local and continually updated copy of our Github Master. Branches are your friend and you should always use them.",
          "instructions1": "In this example, we've been tasked with working on the navigation bar inside of the index page. We will create a branch and jump into that branch using “checkout.” Type in:",
          "command1": "git checkout -b myNavbar",
          "instructions2": "",
          "command2": "",
          "terminal1": "<p>git checkout -b myNavbar</p><p>Switched to a new branch 'myNavbar'</p>",
          "hint": "",
          "append1": "We now have a local branch called myNavbar where we will begin our work. Notice that we skipped using “git branch myNavbar” followed by “git checkout myNavbar.” We just combined them into one command. What is checkout? This command simply allows us to switch between branches and the master. We will cover more of this in the next tutorial.",
          "answer1": "git checkout -b myNavbar",
          "style1": "#lb",
          "hint1": "git checkout -b myNavbar",
          "hint2": "",
          "branch1": "",
          "branch2": "",
          "backTerminal": "",
          "previousTerminal": "",
          "answer2": "",
          "answer3": "",
          "answer4": "",
          "answer5": "",
          "answer6": "",
          "answer7": "",
          "preStyle1": "#lm",
          "removeStyle1": "#lm"
        },
        {
          "stepNum": 2,
          "learn": "Let’s pretend that the new navbar is complete and we are ready to send it up to Github so our team can take a look. First, we will need to add and commit the files. When committing, don’t forget that you must provide a log message, describing what the commit contains.",
          "instructions1": "Type in:",
          "command1": "git add .",
          "instructions2": "Followed by:",
          "command2": "git commit -m \"completed the navbar\"",
          "terminal1": "<p>git add .</p>",
          "terminal2": "<p>git commit -m \"completed the navbar\"</p><p>[version1 1234abc] completed the navbar<br>1 files changed, 23 insertions(+)</p>",
          "answer1": "git add .",
          "answer2": "git commit -m \"completed the navbar\"",
          "append2": "Pro tip: If you ever want to see exactly what files you have modified before adding and committing. Type in “git status” to see a list of the files.",
          "style1": "#lb",
          "style2": "#lb",
          "hint1": "git add .",
          "hint2": "git commit -m \"completed the navbar\"",
          "hint3": "",
          "previousTerminal": "<p>git checkout -b myNavbar</p><p>Switched to a new branch 'myNavbar'</p>",
          "answer3": "",
          "answer4": "",
          "answer5": "",
          "answer6": "",
          "answer7": "",
          "preStyle1": "#lb"
        },
        {
          "stepNum": 3,
          "learn": "Now that the files have been committed, we are ready to push them up to our Github Branch.",
          "instructions1": "Notice in this command that the origin refers to the name of the branch. In this case, myNavbar. Type in:",
          "command1": "git push origin myNavbar",
          "terminal1": "<p>git push origin myNavbar</p><p>Counting objects: 3, done.<br>Delta compression using up to 4 threads.<br>Compressing objects: 100% (2/2), done.<br>Writing objects: 100% (3/3), 286 bytes | 0 bytes/s , done.<br>Total 3 (delta 1), reused 0 (delta 0)<br>remote: Resolving deltas: 100% (1/1), completed with 1 local object.<br>To https://github.com/user/myProject.git<br>* [a123456...b123ab1] myNavbar -> myNavbar</p>",
          "hint": "",
          "answer1": "git push origin myNavbar",
          "style1": "#gb",
          "hint1": "git push origin myNavbar",
          "hint2": "",
          "previousTerminal": "<p>git checkout -b myNavbar</p><p>Switched to a new branch 'myNavbar'</p><p>git add .</p><p>git commit -m \"completed the navbar\"</p><p>[version1 1234abc] completed the navbar<br>1 files changed, 23 insertions(+)</p>",
          "answer2": "",
          "answer3": "",
          "answer4": "",
          "answer5": "",
          "answer6": "",
          "answer7": "",
          "preStyle1": "#lb"
        },
        {
          "stepNum": 4,
          "learn": "Now that your new branch is available for your team to view, you will need to go to Github and create a “pull request.” This allows your team to review your work, pull down a copy of the code for testing, and give it a thumbs up if it works as expected. For our purposes, let’s assume that the pull request was successful and your team approved a merge to the Github Master. This merge means that your branch is now a part of the Github Master. Your new navbar is now public!",
          "instructions1": "Now that the Github Master is updated, the next step is to pull down the new master into your Local Master. Remember, I mentioned that our Local Master acts as a continually updated copy of our Github Master. Before we can do so, we need to switch back to the Local Master. Type in:",
          "command1": "git checkout master",
          "terminal1": "<p>git checkout master</p><p>Switched to branch 'master'</p>",
          "answer1": "git checkout master",
          "style1": "#lm",
          "removeStyle1": "#lb",
          "preStyle1": "#gm",
          "preStyle2": "#lb",
          "removeOldStyle": "#gb",
          "hint1": "git checkout master",
          "hint2": "",
          "previousTerminal": "<p>git checkout -b myNavbar</p><p>Switched to a new branch 'myNavbar'</p><p>git add .</p><p>git commit -m \"completed the navbar\"</p><p>[version1 1234abc] completed the navbar<br>1 files changed, 23 insertions(+)</p><p>git push origin myNavbar</p><p>Counting objects: 3, done.<br>Delta compression using up to 4 threads.<br>Compressing objects: 100% (2/2), done.<br>Writing objects: 100% (3/3), 286 bytes | 0 bytes/s , done.<br>Total 3 (delta 1), reused 0 (delta 0)<br>remote: Resolving deltas: 100% (1/1), completed with 1 local object.<br>To https://github.com/user/myProject.git<br>* [a123456...b123ab1] myNavbar -> myNavbar</p>",
          "answer2": "",
          "answer3": "",
          "answer4": "",
          "answer5": "",
          "answer6": "",
          "answer7": "",
          "preStyle1": "#gm",
          "preStyle2": "#lb"
        },
        {
          "stepNum": 5,
          "learn": "We are now ready to pull down the updated Github Master into our Local Master",
          "instructions1": "Let's pull down the code. Type in:",
          "command1": "git pull origin master",
          "terminal1": "<p>git pull origin master</p><p>From https://github.com/user/myProject<br>* branch master -> FETCH_HEAD<br>123456a..b789876 master -> origin/master<br>Updating 123456a..b789876<br>Fast-foward<br>.gitignore | 0<br>css/main.css | 3<br>index.html | 3<br>javascripts/main.js | 3<br>4 files changed, 9 insertions(+)<br>123456 create mode .gitignore</p>",
          "answer1": "git pull origin master",
          "style1": "#lm",
          "removeStyle1": "#gm",
          "preStyle1": "#gm",
          "removeOldStyle": "#gb",
          "hint1": "git pull origin master",
          "hint2": "",
          "previousTerminal": "<p>git checkout -b myNavbar</p><p>Switched to a new branch 'myNavbar'</p><p>git add .</p><p>git commit -m \"completed the navbar\"</p><p>[version1 1234abc] completed the navbar<br>1 files changed, 23 insertions(+)</p><p>git push origin myNavbar</p><p>Counting objects: 3, done.<br>Delta compression using up to 4 threads.<br>Compressing objects: 100% (2/2), done.<br>Writing objects: 100% (3/3), 286 bytes | 0 bytes/s , done.<br>Total 3 (delta 1), reused 0 (delta 0)<br>remote: Resolving deltas: 100% (1/1), completed with 1 local object.<br>To https://github.com/user/myProject.git<br>* [a123456...b123ab1] myNavbar -> myNavbar</p><p>git checkout master</p><p>Switched to branch 'master'</p>",
          "answer2": "",
          "answer3": "",
          "answer4": "",
          "answer5": "",
          "answer6": "",
          "answer7": "",
          "preStyle1": "#gm",
          "preStyle2": "#lm"
        },
        {
          "stepNum": 6,
          "learn": "Last of all, let’s make a new branch in order to start working on a new task.",
          "instructions1": " This time let’s say we are going to be working on the footer. Let's name the branch accordingly. Type in:",
          "command1": "git checkout -b myFooter",
          "terminal1": "<p>git checkout -b myFooter</p><p>Switched to a new branch 'myFooter'</p>",
          "answer1": "git checkout -b myFooter",
          "style1": "#lb",
          "removeStyle1": "#lm",
          "hint1": "git checkout -b myFooter",
          "hint2": "",
          "previousTerminal": "<p>git checkout -b myNavbar</p><p>Switched to a new branch 'myNavbar'</p><p>git add .</p><p>git commit -m \"completed the navbar\"</p><p>[version1 1234abc] completed the navbar<br>1 files changed, 23 insertions(+)</p><p>git push origin myNavbar</p><p>Counting objects: 3, done.<br>Delta compression using up to 4 threads.<br>Compressing objects: 100% (2/2), done.<br>Writing objects: 100% (3/3), 286 bytes | 0 bytes/s , done.<br>Total 3 (delta 1), reused 0 (delta 0)<br>remote: Resolving deltas: 100% (1/1), completed with 1 local object.<br>To https://github.com/user/myProject.git<br>* [a123456...b123ab1] myNavbar -> myNavbar</p><p>git pull origin master</p><p>From https://github.com/user/myProject<br>* branch master -> FETCH_HEAD<br>123456a..b789876 master -> origin/master<br>Updating 123456a..b789876<br>Fast-foward<br>.gitignore | 0<br>css/main.css | 3<br>index.html | 3<br>javascripts/main.js | 3<br>4 files changed, 9 insertions(+)<br>123456 create mode .gitignore</p>",
          "answer2": "",
          "answer3": "",
          "answer4": "",
          "answer5": "",
          "answer6": "",
          "answer7": "",
          "preStyle1": "#lm"
        },
        {
          "stepNum": 7,
          "learn": "<p>Great work! Let’s do a quick review of everything we’ve covered so far. We will once again pretend we are working on the navigation bar inside of the index page. Remember, the flow of using git/github is like rounding the bases of a baseball diamond.</p><p>Local Master is homebase, the Local Branch is 1st base, Github Branch is 2nd base, Github Master is 3rd base, and once you pull down that updated directory onto your Local Master, you’ve hit a homerun. Any skipping bases is a no no. Lastly, before you can begin working, you must always checkout of the master and create a new branch.</p>",
          "instructions1": "1. Before we begin working on the Navbar, we must create a branch. Type in:",
          "command1": "git checkout -b myNavbar",
          "terminal1": "<p>git checkout -b myNavbar</p><p>Switched to a new branch 'myNavbar'</p>",
          "append7": "Great work! Let's keep moving!",
          "instructions2": "2. Let's pretened that the navbar is complete. Let’s add our work.",
          "command2": "git ",
          "command2": "git add .",
          "terminal2": "<p>git add .</p>",
          "instructions3": "3. Now commit it.",
          "command3": "git commit -m \"completed the navbar\"",
          "terminal3": "<p>git commit -m \"completed the navbar\"</p><p>[version1 1234abc] completed the navbar<br>1 files changed, 23 insertions(+)</p>",
          "instructions4": "4. Next, let’s push up our branch so our teammates can take a look, and review our work before merging it with the Github Master. We will pretend that you have made a pull request on the Github website. For this example, when you push to Github Branch, let's just assume that the merge to Github Master happened immediately.",
          "command4": "git push origin myNavbar",
          "terminal4": "<p>git push origin myNavbar</p><p>Counting objects: 3, done.<br>Delta compression using up to 4 threads.<br>Compressing objects: 100% (2/2), done.<br>Writing objects: 100% (3/3), 286 bytes | 0 bytes/s , done.<br>Total 3 (delta 1), reused 0 (delta 0)<br>remote: Resolving deltas: 100% (1/1), completed with 1 local object.<br>To https://github.com/user/myProject.git<br>* [a123456...b123ab1] myNavbar -> myNavbar</p>",
          "instructions5": "5. Let’s assume that everything looked great and the merge was successful. We are now ready to update our Local Master with the most up to date version of our project. Before we do so, we need to switch back to our Local Master. NOTE: The Local Branch is still highlighted to show that we are still inside of that directory, even though we pushed our files up to Github. Type in:",
          "command5": "git checkout master",
          "terminal5": "<p>git checkout master</p><p>Switched to branch 'master'</p>",
          "instructions6": "6. Let’s now update the Local Master with the newly updated files in our Github Master. Remember, we always want to keep our Local Master up to date with changes made to our Github Master. If we don't, we will be working on a project that is no longer up to date! Type in:",
          "command6": "git pull origin master",
          "terminal6": "<p>git pull origin master</p><p>From https://github.com/user/myProject<br>* branch master -> FETCH_HEAD<br>123456a..b789876 master -> origin/master<br>Updating 123456a..b789876<br>Fast-foward<br>.gitignore | 0<br>css/main.css | 3<br>index.html | 3<br>javascripts/main.js | 3<br>4 files changed, 9 insertions(+)<br>123456 create mode .gitignore</p>",
          "instructions7": "7. As always, the final step is to make a new branch off of the Local Master. That way we don’t override our newly updated master. Let’s once again pretend that our next task will be to build a footer for the page. Type in:",
          "command7": "git checkout -b myFooter",
          "terminal7": "<p>git checkout -b myFooter</p><p>Switched to a new branch 'myFooter'</p>",
          "answer1": "git checkout -b myNavbar",
          "answer2": "git add .",
          "answer3": "git commit -m \"completed the navbar\"",
          "answer4": "git push origin myNavbar",
          "answer5": "git checkout master",
          "answer6": "git pull origin master",
          "answer7": "git checkout -b myFooter",
          "style1": "#lb",
          "style2": "#lb",
          "style3": "#lb",
          "style4": "#gm",
          "style5": "#lm",
          "style6": "#lm",
          "style7": "#lb",
          "removeStyle1": "#lm",
          "removeStyle4": "#gb",
          "removeStyle5": "#lb",
          "removeStyle6": "#gm",
          "removeStyle7": "#lm",
          "preStyle1": "#lm",
          "hint1": "git checkout -b myNavbar",
          "hint2": "git add .",
          "hint3": "git commit -m \"completed the navbar\"",
          "hint4": "git push origin myNavbar",
          "hint5": "git checkout master",
          "hint6": "git pull origin master",
          "hint7": "git checkout -b myFooter",
          "previousTerminal": ""
        }
      ]
    },
    {
      "id": "workflow-challenge",
      "steps": [
        {
          "stepNum": 1,
          "learn": "<p>You will be tasked with completing the following task, with appropriate commands, and in the appropriate order. If you get stuck, hover over the ? icon in the upper right hand corner.</p><p>Scenario: You’ve been working in a new branch named “myHomepage” and have made several edits to the files inside your project. In this example, let’s say you finished building the navbar and did some basic styling. Remember to add and commit your files before you continue through the rest of the workflow path.</p>",
          "instructions1": "1.",
          "command1": "Add your files",
          "terminal1": "<p>git add .</p>",
          "hint1": "git add .",
          "answer1": "git add .",
          "append1": "",
          "styleStart": "#lb",
          "instructions2": "2.",
          "command2": "Use the log message \"completed page layout\"",
          "terminal2": "<p>git commit -m \"completed page layout\"</p><p>[version1 1234abc] completed page layout<br>2 files changed, 30 insertions(+)</p>",
          "hint2": "git commit -m \"completed page layout\"",
          "answer2": "git commit -m \"completed page layout\"",
          "instructions3": "3.",
          "command3": "Use the branch name, myHomepage",
          "terminal3": "<p>git push origin myHomepage</p><p>Counting objects: 16, done.<br>Delta compression using up to 4 threads.<br>Compressing objects: 100% (6/6), done.<br>Writing objects: 100% (16/16), 1.19 KiB | 0 bytes/s , done.<br>Total 16 (delta 1), reused 0 (delta 0)<br>remote: Resolving deltas: 100% (1/1), done.<br>To https://github.com/user/myProject.git<br>* [new branch] myHomepage -> myHomepage</p>",
          "hint3": "git push origin myHomepage",
          "answer3": "git push origin myHomepage",
          "style3": "#gb",
          "removeStyle3": "#lb",
          "hint4": "",
          "backRemove1": "#gm",
          "previousTerminal": "",
          "backTerminal": "",
          "answer4": "",
          "answer5": "",
          "answer6": "",
          "answer7": "",
          "preStyle1": "#lb"
        },
        {
          "stepNum": 2,
          "learn": "Let’s once again imagine that you have created a pull request on Github, your team has checked out your code, approved it, and your Github Master is now up to date with the approved changes. Type in your next steps to complete the workflow. Let's pretend that the next task will be to create a company history page, which will be reflected in the branch name.",
          "instructions1": "1.",
          "command1": "Go back to your local master",
          "terminal1": "<p>git checkout master</p><p>Switched to branch 'master'</p>",
          "hint1": "git checkout master",
          "answer1": "git checkout master",
          "append1": "",
          "style1": "#lm",
          "removeStyle1": "#lb",
          "hint1": "git checkout master",
          "instructions2": "2.",
          "command2": "Pull down your files into your local master",
          "terminal2": "<p>git pull origin master</p><p>From https://github.com/user/myProject<br>* branch master -> FETCH_HEAD<br>123456a..b789876 master -> origin/master<br>Updating 123456a..b789876<br>Fast-foward<br>.gitignore | 0<br>css/main.css | 3<br>index.html | 3<br>javascripts/main.js | 3<br>4 files changed, 9 insertions(+)<br>123456 create mode .gitignore</p>",
          "hint2": "git pull origin master",
          "answer2": "git pull origin master",
          "append2": "",
          "style2": "#lm",
          "removeStyle2": "#gm",
          "instructions3": "3.",
          "command3": "Checkout and create a branch called companyHistory",
          "terminal3": "<p>git checkout -b companyHistory</p><p>Switched to a new branch 'companyHistory'</p>",
          "hint3": "git checkout -b companyHistory",
          "answer3": "git checkout -b companyHistory",
          "style3": "#lb",
          "removeStyle3": "#lm",
          "preStyle1": "#gm",
          "preStyle2": "#lb",
          "removeOldStyle": "#gb",
          "hint4": "",
          "previousTerminal": "<p>git add .</p><p>git commit -m \"completed page layout\"</p><p>[version1 1234abc] completed page layout<br>2 files changed, 30 insertions(+)</p><p>git push origin myHomepage</p><p>Counting objects: 16, done.<br>Delta compression using up to 4 threads.<br>Compressing objects: 100% (6/6), done.<br>Writing objects: 100% (16/16), 1.19 KiB | 0 bytes/s , done.<br>Total 16 (delta 1), reused 0 (delta 0)<br>remote: Resolving deltas: 100% (1/1), done.<br>To https://github.com/user/myProject.git<br>* [new branch] myHomepage -> myHomepage</p>",
          "answer4": "",
          "answer5": "",
          "answer6": "",
          "answer7": "",
          "append3": "Great work! Let's keep moving on to more exercises."
        }
      ]
    },
    {
      "id": "checkout-tutorial",
      "steps": [
        {
          "stepNum": 1,
          "learn": "Checkout is used to switch between any of your branches or to your local master. Confusion often lies when checking out to the master or to your branches, <i>without adding and committing beforehand</i>. This tutorial aims to clear up some of this confusion and give you some real world context.",
          "instructions1": "Let’s say you’ve been working on a branch for a while. You have a few files inside of that branch that have been modified. Let’s take a look and see what files in particular have changed. Type in the command below into the terminal and hit enter",
          "command1": "git status",
          "terminal1": "<p>git status</p><p>On branch myBranch<br>Your branch is up-to-date with 'origin/master'.<br>Changes not staged for commit: <br>(use \"git add <file>...\" to update what will be committed)<br>Changes not staged for commit: <br>(use \"git checkout -- <file>. . .\" to discard changes in working directory)<br>modified: index.html<br>modified: css/main.css<br>no changes added to commit (use \"git add\" and/or \"git commit -a\")</p>",
          "answer1": "git status",
          "style1": "#lb",
          "styleStart": "#lb",
          "hint1": "git status",
          "hint2": "",
          "branch1": "index.html",
          "branch2": "css/main.css",
          "backTerminal": "",
          "previousTerminal": "",
          "answer2": "",
          "answer3": "",
          "answer4": "",
          "answer5": "",
          "answer6": "",
          "answer7": "",
          "preStyle1": "#lb"
        },
        {
          "stepNum": 2,
          "learn": "Index.html, the css directory, and main.css are inside of Local Branch. In this case, we have simply named the branch, myBranch. Now, let’s checkout to the master and see what happens to the files.",
          "instructions1": "For the sake of example, we will purposely not add or commit these files. Type in:",
          "command1": "git checkout master",
          "terminal1": "<p>git checkout master</p><p>Switched to branch 'master'</p>",
          "instructions2": "Next, let's take a look at the files",
          "command2": "git status",
          "terminal2": "<p>git status</p><p>On branch master<br>Your branch is up-to-date with 'origin/master'.<br>Changes not staged for commit: <br>(use \"git add <file>...\" to update what will be committed)<br>Changes not staged for commit: <br>(use \"git checkout -- <file>. . .\" to discard changes in working directory)<br>modified: index.html<br>modified: css/main.css<br>no changes added to commit (use \"git add\" and/or \"git commit -a\"</p>",
          "answer1": "git checkout master",
          "answer2": "git status",
          "append2": "Notice how these same files haved moved over to our Local Master. As you might expect, this would create some problems if we added and committed these changes to the master instead of to the branch we want to push up to Github.",
          "style1": "#lm",
          "style2": "#lm",
          "removeStyle1": "#lb",
          "hint1": "git checkout master",
          "hint2": "git status",
          "hint3": "",
          "previousTerminal": "<p>git status</p><p>On branch myBranch<br>Your branch is up-to-date with 'origin/master'.<br>Changes not staged for commit: <br>(use \"git add <file>...\" to update what will be committed)<br>Changes not staged for commit: <br>(use \"git checkout -- <file>. . .\" to discard changes in working directory)<br>modified: index.html<br>modified: css/main.css<br>no changes added to commit (use \"git add\" and/or \"git commit -a\")</p>",
          "answer3": "",
          "answer4": "",
          "answer5": "",
          "answer6": "",
          "answer7": "",
          "preStyle1": "#lb"
        },
        {
          "stepNum": 3,
          "learn": "Git offers a helpful safeguard, if there are conflicts that would occur during the checkout, it will warn you. It will say something like:<br><p class='note'>error: Your local changes to the following files would be overwritten by checkout: index.html css/main.css<br>Please commit your changes or stash them before you switch branches.<br>Aborting<br></p><p>This git error will often save you some headache, but this tutorial is to show you what to do when that error is <i>not</i> given. Notice that we are now in the Local Master with some files we need to commit elsewhere. We need to move back to our branch and commit them there, not in our master.</p>",
          "instructions1": " Type in the command below, notice the files will follow you back to myBranch.",
          "command1": "git checkout myBranch",
          "terminal1": "<p>git checkout myBranch</p><p>Switched to branch 'myBranch'</p>",
          "answer1": "git checkout myBranch",
          "style1": "#lb",
          "removeStyle1": "#lm",
          "hint1": "git checkout myBranch",
          "hint2": "",
          "previousTerminal": "<p>git status</p><p>On branch myBranch<br>Your branch is up-to-date with 'origin/master'.<br>Changes not staged for commit: <br>(use \"git add <file>...\" to update what will be committed)<br>Changes not staged for commit: <br>(use \"git checkout -- <file>. . .\" to discard changes in working directory)<br>modified: index.html<br>modified: css/main.css<br>no changes added to commit (use \"git add\" and/or \"git commit -a\"</p><p>git checkout master</p><p>Switched to branch 'master'</p><p>git status</p><p>On branch master<br>Your branch is up-to-date with 'origin/master'.<br>Changes not staged for commit: <br>(use \"git add <file>...\" to update what will be committed)<br>Changes not staged for commit: <br>(use \"git checkout -- <file>. . .\" to discard changes in working directory)<br>modified: index.html<br>modified: css/main.css<br>no changes added to commit (use \"git add\" and/or \"git commit -a\")</p>",
          "answer2": "",
          "answer3": "",
          "answer4": "",
          "answer5": "",
          "answer6": "",
          "answer7": "",
          "preStyle1": "#lm"
        },
        {
          "stepNum": 4,
          "learn": " Notice how we were able to commit those files in either location. Whenever we changed locations, the files followed. We could also create a new branch entirely and those same files would follow us, waiting to be committed. <i>Note: The rule that files will follow if you don’t commit them is important to remember in order to complete the upcoming challenge.</i>",
          "terminal1": "",
          "hint1": "",
          "previousTerminal": "<p>git status</p><p>On branch myBranch<br>Your branch is up-to-date with 'origin/master'.<br>Changes not staged for commit: <br>(use \"git add <file>...\" to update what will be committed)<br>Changes not staged for commit: <br>(use \"git checkout -- <file>. . .\" to discard changes in working directory)<br>modified: index.html<br>modified: css/main.css<br>no changes added to commit (use \"git add\" and/or \"git commit -a\"</p><p>git checkout master</p><p>Switched to branch 'master'</p><p>git status</p><p>On branch master<br>Your branch is up-to-date with 'origin/master'.<br>Changes not staged for commit: <br>(use \"git add <file>...\" to update what will be committed)<br>Changes not staged for commit: <br>(use \"git checkout -- <file>. . .\" to discard changes in working directory)<br>modified: index.html<br>modified: css/main.css<br>no changes added to commit (use \"git add\" and/or \"git commit -a\")</p><p>git checkout myBranch</p><p>Switched to branch 'myBranch'</p>",
          "answer1": "",
          "answer2": "",
          "answer3": "",
          "answer4": "",
          "answer5": "",
          "answer6": "",
          "answer7": "",
          "preStyle1": "#lb"
        }
      ]
    },
    {
      "id": "checkout-challenge",
      "steps": [
        {
          "stepNum": 1,
          "learn": "<p>You will be tasked with completing the following task, with appropriate commands, and in the appropriate order. If you get stuck, hover over the ? icon in the upper right hand corner.</p><p>Scenario: You’ve been working for a while now and just realized you’ve been working on the master by mistake! You need to push these changes up to Github. Resolve this issue and then update your project on Github.</p><p>Note: These files are currently located inside of the Local Master.</p>",
          "instructions1": "1.",
          "command1": "1. Use myHomepage",
          "terminal1": "<p>git checkout -b myHomepage</p><p>Switched to a new branch 'myHomepage'</p>",
          "hint1": "git checkout -b myHomepage",
          "answer1": "git checkout -b myHomepage",
          "append1": "",
          "styleStart": "#lm",
          "removeStyle1": "#lm",
          "style1": "#lb",
          "instructions2": "2.",
          "command2": "2.",
          "hint2": "git add .",
          "answer2": "git add .",
          "terminal2": "<p>git add .</p>",
          "instructions3": "3.",
          "command3": "3. Use message \"building splash page\"",
          "terminal3": "<p>git commit -m \"building splash page\"</p><p>[version1 1234abc] building splash page<br>2 files changed, 2 insertions(+)</p>",
          "hint3": "git commit -m \"building splash page\"",
          "answer3": "git commit -m \"building splash page\"",
          "instructions4": "4.",
          "command4": "4.",
          "terminal4": "<p>git push origin myHomepage</p><p>Counting objects: 16, done.<br>Delta compression using up to 4 threads.<br>Compressing objects: 100% (6/6), done.<br>Writing objects: 100% (16/16), 1.19 KiB | 0 bytes/s , done.<br>Total 16 (delta 1), reused 0 (delta 0)<br>remote: Resolving deltas: 100% (1/1), done.<br>To https://github.com/user/myProject.git<br>* [new branch] myHomepage -> myHomepage</p>",
          "hint4": "git push origin myHomepage",
          "answer4": "git push origin myHomepage",
          "style4": "#gb",
          "removeStyle4": "#lb",
          "hint5": "",
          "answer5": "",
          "answer6": "",
          "answer7": "",
          "backTerminal": "<p>git checkout -b myHomepage</p><p>Switched to a new branch 'myHomepage'</p><p>git add .</p><p>git commit -m \"building splash page\"</p><p>[version1 1234abc] building splash page<br>2 files changed, 2 insertions(+)</p><p>git push origin myHomepage</p><p>Counting objects: 16, done.<br>Delta compression using up to 4 threads.<br>Compressing objects: 100% (6/6), done.<br>Writing objects: 100% (16/16), 1.19 KiB | 0 bytes/s , done.<br>Total 16 (delta 1), reused 0 (delta 0)<br>remote: Resolving deltas: 100% (1/1), done.<br>To https://github.com/user/myProject.git<br>* [new branch] myHomepage -> myHomepage</p>",
          "previousTerminal": "",
          "append4": "Great work! Your team is now ready to take a look at your updated project. Let's move on to some more exercises.",
          "preStyle1": "#lm"
        }
      ]
    },
    {
      "id": "teammate-code-tutorial",
      "steps": [
        {
          "stepNum": 1,
          "learn": "<p>It’s now time to learn how to actually test another teammates code before they merge it with the master. For this exercise, let’s assume that your teammate has already pushed up their branch to Github and they made a pull request. Thankfully, all we need to know is the name of their branch in order to pull it down and check it out for ourselves.</p><p>Your teammate has been working on some general layout and styling for your project and has made a few changes to the css file, his branch is called JohnStyling. We have been working on a branch of our own for a while (let's say we were building a splash page). We will need to commit our work, make a new branch off of the master, and create / checkout into a new branch in order to take a look at John’s work.</p>",
          "instructions1": "1. To avoid any conflicts and to keep things simple. I recommend testing in a new branch with the same name as your teammates branch. I find it easier to keep things organized this way. Before we create a new branch, let’s save our work. Type in:",
          "command1": "git add .",
          "terminal1": "<p>git add .</p>",
          "instructions2": "2. Next, let's commit our work. Again, let's say we are in the middle of building a splash page. Type in:",
          "command2": "git commit -m \"building splash page\"",
          "terminal2": "<p>git commit -m \"building splash page\"</p><p>[version1 1234abc] building splash page<br>2 files changed, 52 insertions(+)</p>",
          "hint1": "git add.",
          "hint2": "git commit -m \"building splash page\"",
          "answer1": "git add .",
          "answer2": "git commit -m \"building splash page\"",
          "style1": "#lb",
          "styleStart": "#lb",
          "hint3": "",
          "backTerminal": "",
          "previousTerminal": "",
          "answer3": "",
          "answer4": "",
          "answer5": "",
          "answer6": "",
          "answer7": "",
          "preStyle1": "#lb"
        },
        {
          "stepNum": 2,
          "learn": "<p>Now that our files have been committed to our splash page branch, let’s make a new branch to store the code that we will be testing. In order to be sure we are seeing exactly what John is seeing (and not code that includes our most recent commit to our splash page) let's go back to our Local Master and create the branch from there. Once again, let’s name the branch same as our teammate's, in this case, JohnStyling.</p>",
          "instructions1": "Let's go back to our Local Master. Type in:",
          "command1": "git checkout master",
          "terminal1": "<p>git checkout master</p><p>Switched to branch 'master'</p>",
          "answer1": "git checkout master",
          "style1": "#lm",
          "removeStyle1": "#lb",
          "hint1": "git checkout master",
          "instructions2": "Now, let's create the new branch to store John's code. Type in:",
          "command2": "git checkout -b JohnStyling",
          "terminal2": "<p>git checkout -b JohnStyling</p><p>Switched to a new branch 'JohnStyling'</p>",
          "answer2": "git checkout -b JohnStyling",
          "style2": "#lb",
          "removeStyle2": "#lm",
          "hint2": "git checkout -b JohnStyling",
          "hint3": "",
          "previousTerminal": "<p>git add .</p><p>git commit -m \"building splash page\"</p><p>[version1 1234abc] building splash page<br>2 files changed, 52 insertions(+)</p>",
          "answer3": "",
          "answer4": "",
          "answer5": "",
          "answer6": "",
          "answer7": "",
          "preStyle1": "#lb"
        },
        {
          "stepNum": 3,
          "learn": "<p>We are now inside of a new branch called JohnStyling. It currently only contains the same code as our Local Master. Our old branch, splashPage, is still there.</p>",
          "instructions1": "Now, let’s pull down John’s branch and test it out. Type in:",
          "command1": "git pull origin JohnStyling",
          "command2": "",
          "terminal1": "<p>git pull origin JohnStyling</p><p>From https://github.com/user/myProject<br>* branch master -> FETCH_HEAD<br>123456a..b789876 master -> origin/master<br>Updating 123456a..b789876<br>Fast-foward<br>.gitignore | 0<br>css/main.css | 3<br>index.html | 3<br>javascripts/main.js | 3<br>4 files changed, 9 insertions(+)<br>123456 create mode .gitignore</p>",
          "append1": "We have now pulled down a copy of John's code into the JohnStyling branch.",
          "answer1": "git pull origin JohnStyling",
          "style1": "#lb",
          "hint1": "git pull origin JohnStyling",
          "hint2": "",
          "previousTerminal": "<p>git add .</p><p>git commit -m \"building splash page\"</p><p>[version1 1234abc] building splash page<br>2 files changed, 52 insertions(+)</p><p>git checkout master</p><p>Switched to branch 'master'</p><p>git checkout -b JohnStyling</p><p>Switched to a new branch 'JohnStyling'</p>",
          "answer2": "",
          "answer3": "",
          "answer4": "",
          "answer5": "",
          "answer6": "",
          "answer7": "",
          "preStyle1": "#lb",
          "removeStyle1": ""
        },
        {
          "stepNum": 4,
          "learn": "<p>Nice work. Let’s now pretend that you’ve tested John’s code on your local machine and things are looking great. This is when you would give his code a thumbs up on Github, make sure all your other teammates have tested the code, and merge the pull request with your Github Master.</p><p>Again, we will assume that this has already happened. Notice, the Local Branch is still highlighted to indicate that we need to checkout to our Local Master before we are able to update it with the new Github Master.</p>",
          "instructions1": "1. Before we can update our Local Master, we need checkout to the Local Master. Type in:",
          "command1": "git checkout master",
          "instructions2": "2. We are now ready to pull down the files into our master. Type in:",
          "command2": "git pull origin master",
          "terminal1": "<p>git checkout master</p><p>Switched to branch 'master'</p>",
          "answer1": "git checkout master",
          "answer2": "git pull origin master",
          "terminal2": "<p>git pull origin master</p><p>From https://github.com/user/myProject<br>* branch master -> FETCH_HEAD<br>123456a..b789876 master -> origin/master<br>Updating 123456a..b789876<br>Fast-foward<br>.gitignore | 0<br>css/main.css | 3<br>index.html | 3<br>javascripts/main.js | 3<br>4 files changed, 9 insertions(+)</p>",
          "style1": "#lm",
          "style2": "#lm",
          "removeStyle1": "#lb",
          "removeStyle2": "#gm",
          "hint1": "git checkout master",
          "hint2": "git pull origin master",
          "hint3": "",
          "previousTerminal": "<p>git add .</p><p>git commit -m \"building splash page\"</p><p>[version1 1234abc] building splash page<br>2 files changed, 52 insertions(+)</p><p>git checkout master</p><p>Switched to branch 'master'</p><p>git checkout -b JohnStyling</p><p>Switched to a new branch 'JohnStyling'</p><p>git pull origin JohnStyling</p><p>From https://github.com/user/myProject<br>* branch master -> FETCH_HEAD<br>123456a..b789876 master -> origin/master<br>Updating 123456a..b789876<br>Fast-foward<br>.gitignore | 0<br>css/main.css | 3<br>index.html | 3<br>javascripts/main.js | 3<br>4 files changed, 9 insertions(+)<br>123456 create mode .gitignore</p>",
          "answer3": "",
          "answer4": "",
          "answer5": "",
          "answer6": "",
          "answer7": "",
          "preStyle1": "#lb",
          "preStyle2": "#gm"
        },
        {
          "stepNum": 5,
          "learn": "Okay, our Local Master is up to date with John's new code. The next step is an important step. Remember, we were working on the splash page and we committed some files in that folder before we started testing John’s code. We want to continue to work on that branch after the testing is complete, and be sure to include the new updates we just pulled down into our Local Master.",
          "instructions1": "Let’s go back to our splash page branch. Type in:",
          "command1": "git checkout splashPage",
          "command2": "",
          "terminal1": "<p>git checkout splashPage</p><p>Switched to branch 'splashPage'</p>",
          "answer1": "git checkout splashPage",
          "style1": "#lb",
          "removeStyle1": "#lm",
          "hint1": "git checkout myBranch",
          "hint2": "",
          "previousTerminal": "<p>git add .</p><p>git commit -m \"building splash page\"</p><p>[version1 1234abc] building splash page<br>2 files changed, 52 insertions(+)</p><p>git checkout master</p><p>Switched to branch 'master'</p><p>git checkout -b JohnStyling</p><p>Switched to a new branch 'JohnStyling'</p><p>git pull origin JohnStyling</p><p>From https://github.com/user/myProject<br>* branch master -> FETCH_HEAD<br>123456a..b789876 master -> origin/master<br>Updating 123456a..b789876<br>Fast-foward<br>.gitignore | 0<br>css/main.css | 3<br>index.html | 3<br>javascripts/main.js | 3<br>4 files changed, 9 insertions(+)<br>123456 create mode .gitignore</p><p>git checkout master</p><p>Switched to branch 'master'</p><p>git pull origin master</p><p>From https://github.com/user/myProject<br>* branch master -> FETCH_HEAD<br>123456a..b789876 master -> origin/master<br>Updating 123456a..b789876<br>Fast-foward<br>.gitignore | 0<br>css/main.css | 3<br>index.html | 3<br>javascripts/main.js | 3<br>4 files changed, 9 insertions(+)</p>",
          "answer2": "",
          "answer3": "",
          "answer4": "",
          "answer5": "",
          "answer6": "",
          "answer7": "",
          "preStyle1": "#lm"
        },
        {
          "stepNum": 6,
          "learn": "In the future, you will undoubtedly encounter what are called merge conflicts. These occur when code in one branch (or the Local Master) conflicts with code in another branch. The process of keeping your branch continually up to date with changes to the master can save you some headache down the road. There may be the occasional conflict, but resolving them early on is the best policy.",
          "instructions1": "Now, let’s apply this newly updated master into our splash page branch. Type in:",
          "command1": "git merge master",
          "command2": "",
          "terminal1": "<p>git merge master</p><p>Updating 123456a..b789876<br>Fast-forward<br>.gitignore | 0<br>css/main.css | 3<br>index.html | 3<br>javascripts/main.js | 3<br>4 files changed, 9 insertions(+)</p>",
          "answer1": "git merge master",
          "style1": "#lb",
          "hint1": "git merge master",
          "hint2": "",
          "previousTerminal": "<p>git add .</p><p>git commit -m \"building splash page\"</p><p>[version1 1234abc] building splash page<br>2 files changed, 52 insertions(+)</p><p>git checkout master</p><p>Switched to branch 'master'</p><p>git checkout -b JohnStyling</p><p>Switched to a new branch 'JohnStyling'</p><p>git pull origin JohnStyling</p><p>From https://github.com/user/myProject<br>* branch master -> FETCH_HEAD<br>123456a..b789876 master -> origin/master<br>Updating 123456a..b789876<br>Fast-foward<br>.gitignore | 0<br>css/main.css | 3<br>index.html | 3<br>javascripts/main.js | 3<br>4 files changed, 9 insertions(+)<br>123456 create mode .gitignore</p><p>git checkout master</p><p>Switched to branch 'master'</p><p>git pull origin master</p><p>From https://github.com/user/myProject<br>* branch master -> FETCH_HEAD<br>123456a..b789876 master -> origin/master<br>Updating 123456a..b789876<br>Fast-foward<br>.gitignore | 0<br>css/main.css | 3<br>index.html | 3<br>javascripts/main.js | 3<br>4 files changed, 9 insertions(+)</p><p>git checkout splashPage</p><p>Switched to branch 'splashPage'</p>",
          "answer2": "",
          "answer3": "",
          "answer4": "",
          "answer5": "",
          "answer6": "",
          "answer7": "",
          "preStyle1": "#lb"
        },
        {
          "stepNum": 7,
          "learn": "We are now back to working on our splash page (in the splashPage branch) and we have all of those new updates we just merged into our master.",
          "instructions1": "For our last step, let’s go ahead and delete the JohnStyling branch. We no longer need this old code. Type in:",
          "command1": "git branch -D JohnStyling",
          "command2": "",
          "append1": "The JohnStyling branch has now been deleted. Seem like a lot to remember? Let’s move on the next challenge for both review, and to sharpen your skills.",
          "terminal1": "<p>git branch -D JohnStyling</p><p>Deleted branch JohnStyling</p>",
          "answer1": "git branch -D JohnStyling",
          "style1": "#lb",
          "hint1": "git branch -D JohnStyling",
          "hint2": "",
          "previousTerminal": "<p>git add .</p><p>git commit -m \"building splash page\"</p><p>[version1 1234abc] building splash page<br>2 files changed, 52 insertions(+)</p><p>git checkout -b JohnStyling</p><p>Switched to a new branch 'JohnStyling'</p><p>git pull origin JohnStyling</p><p>From https://github.com/user/myProject<br>* branch master -> FETCH_HEAD<br>123456a..b789876 master -> origin/master<br>Updating 123456a..b789876<br>Fast-foward<br>.gitignore | 0<br>css/main.css | 3<br>index.html | 3<br>javascripts/main.js | 3<br>4 files changed, 9 insertions(+)<br>123456 create mode .gitignore</p><p>git checkout master</p><p>Switched to branch 'master'</p><p>git pull origin master</p><p>From https://github.com/user/myProject<br>* branch master -> FETCH_HEAD<br>123456a..b789876 master -> origin/master<br>Updating 123456a..b789876<br>Fast-foward<br>.gitignore | 0<br>css/main.css | 3<br>index.html | 3<br>javascripts/main.js | 3<br>4 files changed, 9 insertions(+)</p><p>git checkout splashPage</p><p>Switched to branch 'splashPage'</p><p>git merge master</p><p>Updating 123456a..b789876<br>Fast-forward<br>.gitignore | 0<br>css/main.css | 3<br>index.html | 3<br>javascripts/main.js | 3<br>4 files changed, 9 insertions(+)</p>",
          "answer2": "",
          "answer3": "",
          "answer4": "",
          "answer5": "",
          "answer6": "",
          "answer7": "",
          "preStyle1": "#lb"
        }
      ]
    },
    {
      "id": "teammate-code-challenge",
      "steps": [
        {
          "stepNum": 1,
          "learn": "<p>You will be tasked with completing the following task, with appropriate commands, and in the appropriate order. This challenge will be in two parts. Once with some light cues to help you remember the necessary commands, and another pass with no cues. If you get stuck, hover over the ? icon in the upper right hand corner.</p><p>Scenario: You are currently working in a branch and building a splash page (let's simply call the branch splashPage). You need to pull down someone else’s code to test it and make sure it works properly. Don’t forgot to commit your changes before making a new branch and be sure to create a new branch from the Local Master. Afterwards, merge your branch with the new master. Let’s use John’s branch from before, titled JohnStyling.</p>",
          "instructions1": "1. Before you can create a new branch, add and commit your files",
          "command1": "",
          "terminal1": "<p>git add .</p>",
          "hint1": "git add .",
          "answer1": "git add .",
          "instructions2": "2.",
          "command2": "Use message \"building splash page\"",
          "terminal2": "<p>git commit -m \"building splash page\"</p><p>[version1 1234abc] building splash page<br>2 files changed, 52 insertions(+)</p>",
          "hint2": "git commit -m \"building splash page\"",
          "answer2": "git commit -m \"building splash page\"",
          "instructions3": "3. Switch the Local Master before creating a new branch.",
          "command3": "",
          "terminal3": "<p>git checkout master</p><p>Switched to branch 'master'</p>",
          "hint3": "git checkout master",
          "answer3": "git checkout master",
          "style3": "#lm",
          "removeStyle3": "#lb",
          "instructions4": "4. Now, create and checkout into a new branch",
          "command4": "Name the branch JohnStyling",
          "terminal4": "<p>git checkout -b JohnStyling</p><p>Switched to a new branch 'JohnStyling'</p>",
          "hint4": "git checkout -b JohnStyling",
          "answer4": "git checkout -b JohnStyling",
          "style4": "#lb",
          "removeStyle4": "#lm",
          "styleStart": "#lb",
          "instructions5": "5. John's branch is called JohnStyling.",
          "command5": "Grab a copy of John's code.",
          "hint5": "git pull origin JohnStyling",
          "answer5": "git pull origin JohnStyling",
          "terminal5": "<p>git pull origin JohnStyling</p><p>From https://github.com/user/myProject<br>* branch master -> FETCH_HEAD<br>123456a..b789876 master -> origin/master<br>Updating 123456a..b789876<br>Fast-foward<br>.gitignore | 0<br>css/main.css | 3<br>index.html | 3<br>javascripts/main.js | 3<br>4 files changed, 9 insertions(+)<br>123456 create mode .gitignore</p>",
          "backTerminal": "",
          "previousTerminal": "",
          "answer6": "",
          "answer7": "",
          "preStyle1": "#lb"
        },
        {
          "stepNum": 2,
          "learn": "John’s code looks great. Let’s pretend that you gave him a thumbs up on Github and your team just merged the code into your Github Master.",
          "instructions1": "1. Now, let’s go back to our master and pull down the new master.",
          "command1": "Switch to your master",
          "terminal1": "<p>git checkout master</p><p>Switched to branch 'master'</p>",
          "hint1": "git checkout master",
          "answer1": "git checkout master",
          "append1": "",
          "style1": "#lm",
          "instructions2": "2.",
          "command2": "Pull down the new master",
          "terminal2": "<p>git pull origin master</p><p>From https://github.com/user/myProject<br>* branch master -> FETCH_HEAD<br>123456a..b789876 master -> origin/master<br>Updating 123456a..b789876<br>Fast-foward<br>.gitignore | 0<br>css/main.css | 3<br>index.html | 3<br>javascripts/main.js | 3<br>4 files changed, 9 insertions(+)<br>123456 create mode .gitignore</p>",
          "hint2": "git pull origin master",
          "answer2": "git pull origin master",
          "style2": "#lm",
          "removeStyle1": "#lb",
          "removeStyle2": "#gm",
          "preStyle1": "#gm",
          "preStyle2": "#lb",
          "hint3": "",
          "previousTerminal": "<p>git add .</p><p>git commit -m \"building splash page\"</p><p>[version1 1234abc] building splash page<br>2 files changed, 52 insertions(+)</p><p>git checkout master</p><p>Switched to branch 'master'</p><p>git checkout -b JohnStyling</p><p>Switched to a new branch 'JohnStyling'</p><p>git pull origin JohnStyling</p><p>From https://github.com/user/myProject<br>* branch master -> FETCH_HEAD<br>123456a..b789876 master -> origin/master<br>Updating 123456a..b789876<br>Fast-foward<br>.gitignore | 0<br>css/main.css | 3<br>index.html | 3<br>javascripts/main.js | 3<br>4 files changed, 9 insertions(+)<br>123456 create mode .gitignore</p>",
          "answer3": "",
          "answer4": "",
          "answer5": "",
          "answer6": "",
          "answer7": ""
        },
        {
          "stepNum": 3,
          "learn": "Let’s go back to our old branch we were just working in and update it with our new master. Afterwards, go ahead and delete John’s branch, since we won’t need it anymore.",
          "instructions1": "1. Switch to your old branch",
          "command1": "Old branch was called splashPage",
          "answer1": "git checkout splashPage",
          "terminal1": "<p>git checkout splashPage</p><p>Switched to branch 'splashPage'</p>",
          "hint1": "git checkout splashPage",
          "style1": "#lb",
          "removeStyle1": "#lm",
          "instructions2": "2.",
          "command2": "Update your branch with the new master",
          "terminal2": "<p>git merge master</p><p>Updating 123456a..b789876<br>Fast-forward<br>.gitignore | 0<br>css/main.css | 3<br>index.html | 3<br>javascripts/main.js | 3<br>4 files changed, 9 insertions(+)<br>123456 create mode .gitignore</p>",
          "hint2": "git merge master",
          "answer2": "git merge master",
          "instructions3": "3.",
          "command3": "Delete John's old branch (JohnStyling)",
          "answer3": "git branch -D JohnStyling",
          "hint3": "git branch -D JohnStyling",
          "terminal3": "<p>git branch -D JohnStyling</p><p>Deleted branch JohnStyling</p>",
          "preStyle1": "#lm",
          "hint4": "",
          "previousTerminal": "<p>git add .</p><p>git commit -m \"building splash page\"</p><p>[version1 1234abc] building splash page<br>2 files changed, 52 insertions(+)</p><p>git checkout master</p><p>Switched to branch 'master'</p><p>git checkout -b JohnStyling</p><p>Switched to a new branch 'JohnStyling'</p><p>git pull origin JohnStyling</p><p>From https://github.com/user/myProject<br>* branch master -> FETCH_HEAD<br>123456a..b789876 master -> origin/master<br>Updating 123456a..b789876<br>Fast-foward<br>.gitignore | 0<br>css/main.css | 3<br>index.html | 3<br>javascripts/main.js | 3<br>4 files changed, 9 insertions(+)<br>123456 create mode .gitignore</p><p>git checkout master</p><p>Switched to branch 'master'</p><p>git pull origin master</p><p>From https://github.com/user/myProject<br>* branch master -> FETCH_HEAD<br>123456a..b789876 master -> origin/master<br>Updating 123456a..b789876<br>Fast-foward<br>.gitignore | 0<br>css/main.css | 3<br>index.html | 3<br>javascripts/main.js | 3<br>4 files changed, 9 insertions(+)<br>123456 create mode .gitignore</p>",
          "answer4": "",
          "answer5": "",
          "answer6": "",
          "answer7": "",
          "style3": "#lb",
          "append3": "Great work! You are well on your way to working with git. I hope you have found these exercises helpful!"
        }
      ]
    }
  ]
}